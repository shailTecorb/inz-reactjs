import InputFiled from "../../Auth/Common/input_filed";
import { Fragment, useContext, useEffect, useState, useRef } from "react";
import styles from "../../../styles/query.module.scss"
import router, { useRouter } from 'next/router';
import AddVisaType from "../Modals/visaType";
import { business_allvisalist_service, business_add_visa_type, visalist_for_particular_lia } from "../../helpers/business_owner_service";
import { IdContext } from "../../MyContext/IdDetailsContext";
import { lia_agent_list_of_visa_type, lia_agent_add_visa_type } from "../../helpers/lia_services";
import AdminApprovedBW from '../Modals/admin_approved_BW';

const ALLVISALIST = () => {
    const route = useRouter()
    const [isSearching, setSearching] = useState("")
    const [page, setPage] = useState(1)
    const [perPage, setPerPage] = useState(500)
    const [error, setError] = useState("")
    const [isChecked, setIsChecked] = useState(false)
    const [isAllChecked, setIsAllChecked] = useState(false)
    const [isOpen, setIsOpen] = useState(false)
    const [particularVisaType, setParticularBWVisaType] = useState([])
    const [visaList, setVisaList] = useState([])
    const [isDisabled, setIsDisabled] = useState(false)
    const [noData, setNodata] = useState("")
    const { contryId, setVisaId } = useContext(IdContext)
    const [selectedCountryId, setSelectedCountryId] = useState([])
    const [selectedCountryName, setSelectedCountryName] = useState([])
    const [totalCount, setTotalCount] = useState(0)
    const [isLiaAgent, setIsLiaAgent] = useState(false)
    const [open, setOpen] = useState(false)
    const [isLoading, setIsLoading] = useState(false)
    const [isResponse, setIsResponse] = useState(false)
    const [checkedVisa, setCheckedVisa] = useState({})

    const isCheckRender = useRef(true)
    

    useEffect(() => {
        if (isCheckRender.current) {
            getAllVisaList()
            if (localStorage.role == "liaAgent") {
                setIsLiaAgent(true)
            } else {
                setIsLiaAgent(false)
                visa_type_perticular_lia()
            }
            isCheckRender.current = false
        }
        const arry = [1, 2, 1, 3, 4, 3, 5];



    }, [])

    const visa_type_perticular_lia = async () => {
        const response = await visalist_for_particular_lia()
        console.log("response card lisr", response.result)
        if (response.code == 200) {
            // let newData = response.result.map((prev) => {
            //     console.log("=>>>>>>>>>>>>>>>>>>>",prev)
            //     return({...prev,})
            // })
            setVisaList((prev) => {
                //console.log("prev", prev)
                return ([...prev, ...response.result[0].visaTypes])
            })

        }
    }

    const getAllVisaList = async () => {
        setIsLoading(true)
        let Id = JSON.parse(localStorage.getItem("countryId"))
        let _ID = localStorage.visaType ? localStorage.visaType : [];

        if (localStorage.role == "businessOwner") {
            const response = await business_allvisalist_service(Id, isSearching, perPage, page)
            if (response.code == 200) {
                // console.log(response.result,"response")
                setIsLoading(false)
                handleAddVisaType(response.country)
                setTotalCount(response.total)
                let isVisaList = response?.result?.map((item, i) => {
                    return ({ ...item, isChecked: _ID?.includes(item._id) ? true : false })
                }
                )
                console.log(isVisaList, "isVisaList")
                setVisaList((prev) => {
                    // console.log(visaList,"isVisaList")
                    // console.log(prev,"prev")
                    return ([...prev, ...response?.result])
                })
            }
            else if (response.code == 400) {
                setNodata(response.message)
                setIsLoading(false)
            } else {
            }
        }
        else if (localStorage.role == "liaAgent") {
            const response = await lia_agent_list_of_visa_type(Id, isSearching)
            if (response.code == 200) {
                setIsLoading(false)
                handleAddVisaType(response.country)
                setTotalCount(response.total)
                let isVisaList = response?.result?.map((item, i) => {
                    return ({ ...item, isChecked: _ID?.includes(item._id) ? true : false })
                }
                )
                // //console.log("isVisaList",isVisaList)
                let Visa = isVisaList.map((data) => data)
                let VisaData = Visa.map((data) => data)
                if (VisaData == []) {
                    setVisaList(Visa.map((data) => data))
                    setVisaList(Visa)
                } else {
                    setVisaList(Visa)
                }

            }
            else if (response.code == 400) {
                setNodata(response.message)
                setIsLoading(false)
            } else {
            }
        } else {
        }
    }


    const addVisaType = async () => {


        // setIsResponse(true)
        let CountId = visaList.length > 0 && visaList?.reduce(function (acc, current) {
            if (current.isChecked) {
                acc.push(current)
            }
            return acc;
        }, [])


        let visaType = []
        let tempData = CountId.reduce((acc, currrent) => {
            let countryId = CountId.map((li) => (li.countryId._id));

            if (currrent.countryId._id) {
                visaType.push(currrent.visaType)
            }
            // console.log(currrent);
        }, [])
        console.log(visaType)
        // if (CountId.length > 0) {
        //     let countryId = CountId.map((li) => (li.countryId._id));
        //     let visaID = CountId.map((li) => li._id);
        //     if (localStorage.role == "businessOwner") {
        //         const response = await business_add_visa_type(countryId, visaID)
        //         if (response.code == 200 && localStorage.approved == "false") {
        //             localStorage.setItem("visaType", JSON.stringify(visaID))
        //             setIsResponse(false)
        //             setOpen(true)

        //         } else if (response.code == 200 && localStorage.approved == "true") {
        //             localStorage.setItem("visaType", JSON.stringify(visaID))
        //             setIsResponse(false)
        //             // route.push("/busines/owner/dashboard")
        //         }
        //         else {
        //             setError(response.message)
        //             setIsResponse(false)
        //         }

        //     } else if (localStorage.role == "liaAgent") {
        //         const response = await lia_agent_add_visa_type(countryId, "", "", visaID)
        //         //  localStorage.setItem("visaType",JSON.stringify(visaID))
        //         if (response.code == 200) {
        //             localStorage.setItem("visaType", JSON.stringify(visaID))
        //             // route.push("/busines/owner/visa/appointmentMode")
        //             setIsResponse(false)
        //         } else {
        //             setIsResponse(false)
        //             setError(response.message)
        //         }
        //     } 
        // } else {
        //     setError("Please select visa type")
        // }

    }
    const handleChange = (e) => {
        e.preventDefault()
        setSearching(e.target.value)
    }
    const OpenModal = (e) => {
        //    e.preventDefault();
        setIsOpen(true)
    }
    const CloseModal = () => {
        setIsOpen(false)
    }


    const CheckedBox = (id, status) => {

        console.log("Checked", status);
        // let {} = status
        
        let tempParent = visaList
        for (let j = 0; j < visaList.length; j++) {
            // //console.log(visaList,"ggggggggggg")
            if (visaList[j]._id === id) {
                visaList[j].isChecked = !visaList[j].isChecked
                setIsDisabled(true)
            }
            else {
                visaList[j].isChecked = visaList[j].isChecked
                setIsDisabled(false)
            }
        }

        setVisaList([...tempParent])
        setIsAllChecked(false)

    }
    //console.log("particulardata", visaList)

    let VisaList = visaList?.filter((flterData) => {
        if (isSearching == "") {
            return flterData
        } else if (flterData?.visaType?.toLowerCase().includes(isSearching.toLowerCase())) {
            return flterData
        }
    }).map((item, index) => {
        // { //console.log("item", visaList) }
        // // return items.map((item)=>{

        //{item.countryId[0]?.countryName }
        return (
            <div key={index} className={`form-group ${styles.fromGroup}`}>
                <div className={styles.CheckBox}>
                    <input
                        id={item._id}
                        name="checkbox"
                        type="checkbox"
                        checked={item.isChecked === true ? item._id : ""}
                        onChange={(e) => { CheckedBox(item._id, item) }} />
                    <label for={item._id} className={styles.checkboxLabel}>{item.visaType}({isLiaAgent ? (item.countryId?.map((data) => data.countryName)) : item.countryId?.countryName})</label>
                </div>
            </div>
        )
        // })
    })


    // for add visa type 
    const handleAddVisaType = (selectedCountryData) => {
        setIsResponse(true)
        let _countryData = selectedCountryData?.reduce(function (acc, curr) {
            // //console.log(curr)
            if (selectedCountryData) {
                acc.push(curr)
            }
            return acc;
        }, [])
        if (_countryData?.length > 0) {
            //  //console.log(_countryData) 
            _countryData?.map((item, i) => {
                let name = [{ isname: item.countryName, id: item._id }];
                setSelectedCountryName((prev) => {
                    return ([...prev, ...name])
                })
                return (item)
            })
        }
    }

    const selectAllCheckeBox = (e, i) => {
        const { name, checked } = e.target;
        if (name == "allselect") {
            setVisaList((prev) => {
                return ([...prev.map(user => { return ({ ...user, isChecked: isAllChecked ? false : true }) })])
            })
            setIsAllChecked(!isAllChecked)
        }
    }
    return (
        <Fragment>
            <div className={styles.contentWrapper}>
                <AdminApprovedBW
                    open={open} />
                <div className="container-fuild">
                    <div className="row">
                        <div className="col-md-9 m-auto">
                            <h3 className="">VISA Types I’m Working for  </h3>
                            <div className={styles.visaStatus}>
                                <div className="row"><span style={{ color: "red" }}>{error}</span>

                                    {/* <div className={`col-9 pr-0 ${styles.clientStatus}`}>
                                        <ul>
                                            <li>
                                                Total Selected Visa Types <span>24</span>
                                            </li>
                                            <li>
                                                Not Selected Visa Types <span>23</span>
                                            </li>
                                        </ul>
                                    </div> */}


                                    {isLiaAgent ? ""
                                        :
                                        <div className={`col-md-8 pr-0 mt-0 mb-3 ${styles.buttonGroup}`}>
                                            <AddVisaType
                                                styles={styles}
                                                closeModal={CloseModal}
                                                open={isOpen}
                                                openModal={OpenModal}
                                                selectedCountryName={selectedCountryName}
                                                selectedCountryId={selectedCountryId}
                                                handleAddVisaType={handleAddVisaType}
                                                business_add_visa_type={business_add_visa_type}
                                                visa_type_perticular_lia={visa_type_perticular_lia} />
                                        </div>
                                    }

                                </div>
                                <div className="row mt-3">
                                    <div className="col-md-7 m-auto">
                                        <div className={styles.searchSection}>
                                            <form>
                                                <div className="input-group">
                                                    <InputFiled type_name="" placeholder_name="Search by Visa Type"
                                                        inputId="" input_name="" value={isSearching} onChange={handleChange} class_name="form-control" />

                                                </div>
                                                <span className="mt-4 d-block">
                                                    <span style={{ color: "red" }}>  </span>

                                                </span>
                                            </form>
                                        </div>
                                    </div>
                                </div>
                                <div className="row">
                                    <div className={`col-md-7 m-auto`}>
                                        <div className={styles.visaStatusDiv}>

                                            {VisaList.length > 0 && isSearching.length == 0 ? <div className={`form-group ${styles.fromGroup}`}>
                                                <div className={styles.CheckBox}>
                                                    <input id="checkbox" checked={isAllChecked} name="allselect" type="checkbox" onChange={(e) => selectAllCheckeBox(e, null)} />
                                                    <label for="checkbox" className={styles.checkboxLabel}>Select All Visa Type</label>
                                                </div>
                                            </div> : ""}



                                            {isLoading ?
                                                <p>Loading...</p>
                                                //    <Backdrop sx={{ color: '#fff', zIndex: (theme) => theme.zIndex.drawer + 1 }}
                                                //                  open={open} >
                                                //             <CircularProgress color="inherit" />
                                                //    </Backdrop>
                                                : VisaList.length > 0 ? VisaList : <p style={{ color: "red" }}> No data found</p>}
                                        </div>
                                    </div>
                                    <div className="col-md-12 mt-5">
                                        {VisaList.length > 0 ? <div className="row">
                                            <div className={`col-md-7 m-auto text-right ${styles.buttonGroup}`}>
                                                {isResponse ? <button onClick={addVisaType}> Next </button>
                                                    : <button desabled onClick={addVisaType}> Loading... </button>}
                                            </div>
                                        </div> : ""}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </Fragment>
    )
}
export default ALLVISALIST;